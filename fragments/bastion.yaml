AWSTemplateFormatVersion: 2010-09-09
Description: A module to provision a bastion server in a VPC.
Parameters:
  VPCId:
    Description: VPC to run bastion server in
    Type: AWS::EC2::VPC::Id
  VPCSubnets:
    Description: Subnets to pick from to run a bastion server in
    Type: List<AWS::EC2::Subnet::Id>
  InstanceClass:
    Description: EC2 instance class to provision
    Type: String
    Default: t4g.nano
Resources: 
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: '2'
      MinSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: Bastion
          PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref VPCSubnets
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: BastionPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - ec2:DescribeTags
                Resource: '*'
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}/bastion/secure
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}/bastion/audit.log
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}/bastion/messages
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}/bastion/secure:log-stream:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}/bastion/audit.log:log-stream:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}/bastion/messages:log-stream:*
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMRole
  InstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: Bastion
      VpcId: !Ref VPCId
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref IAMInstanceProfile
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2}}'
      InstanceType: !Ref InstanceClass
      SecurityGroups:
        - !Ref InstancesSecurityGroup
      UserData: !Base64
        Fn::Sub: |-
          #!/bin/bash -xe
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d

          # Create the CloudWatch agent config
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/default <<- EOF
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "root"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/secure",
                      "log_group_name": "/${AWS::StackName}/bastion/secure",
                      "log_stream_name": "{instance_id}"
                    },
                    {
                      "file_path": "/var/log/audit/audit.log",
                      "log_group_name": "/${AWS::StackName}/bastion/audit.log",
                      "log_stream_name": "{instance_id}"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/${AWS::StackName}/bastion/messages",
                      "log_stream_name": "{instance_id}"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "append_dimensions": {
                "AutoScalingGroupName": "\${!aws:AutoScalingGroupName}",
                "ImageId": "\${!aws:ImageId}",
                "InstanceId": "\${!aws:InstanceId}",
                "InstanceType": "\${!aws:InstanceType}"
              },
              "metrics_collected": {
                "cpu": {
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "metrics_collection_interval": 60,
                  "totalcpu": false
                },
                "disk": {
                  "measurement": [
                    "used_percent",
                    "inodes_free"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "diskio": {
                  "measurement": [
                    "io_time"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                },
                "statsd": {
                  "metrics_aggregation_interval": 60,
                  "metrics_collection_interval": 10,
                  "service_address": ":8125"
                },
                "swap": {
                  "measurement": [
                    "swap_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EOF

          # If we don't touch this file the CloudWatch agent start script will think we
          # haven't configured it and will overwrite with a default config.
          touch /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml
  SSMAgentAutoUpdate:
    Type: AWS::SSM::Association
    Properties:
      Name: AWS-UpdateSSMAgent
      ScheduleExpression: rate(1 day)
      Targets:
        - Key: tag:aws:autoscaling:groupName
          Values:
            - !Ref AutoScalingGroup
  CloudWatchAgentUpdateAndStart:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Install, setup auto-update, and start AWS CloudWatch Agent
        mainSteps:
          - action: aws:configurePackage
            name: InstallAgent
            inputs:
              action: Install
              name: AmazonCloudWatchAgent
          - action: aws:runDocument
            name: StartAgent
            inputs:
              documentType: SSMDocument
              documentPath: AmazonCloudWatch-ManageAgent
              documentParameters:
                action: start
                optionalConfigurationSource: default
      DocumentType: Command
  CloudWatchAgentAutoUpdate:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref CloudWatchAgentUpdateAndStart
      ScheduleExpression: rate(1 day)
      Targets:
        - Key: tag:aws:autoscaling:groupName
          Values:
            - !Ref AutoScalingGroup